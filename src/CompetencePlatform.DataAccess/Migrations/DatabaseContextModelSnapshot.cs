// <auto-generated />
using System;
using CompetencePlatform.Core.DataAccess.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompetencePlatform.Core.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Behavior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Behaviors");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.BehaviorDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BehaviorId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DegreeCompetenceId")
                        .HasColumnType("int");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BehaviorId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DegreeCompetenceId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("BehavioursDictionaries");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.C_S_M_K_P", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetenceId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int?>("KnowledgeId")
                        .HasColumnType("int");

                    b.Property<int?>("MotivationId")
                        .HasColumnType("int");

                    b.Property<int?>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("MotivationId");

                    b.HasIndex("PreferenceId");

                    b.HasIndex("SkillId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Competence_Skill_Motivation_Knowledge_Preferences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Competence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetenceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Competences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.CompetenceDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BehaviorDictionaryId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetenceId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BehaviorDictionaryId");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CompetenceDictionaries");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.CompetenceProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetenceDictionaryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeProfileId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceDictionaryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmployeeProfileId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CompetenceProfiles");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.CompetenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CompetenceTypes");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.DegreeCompetence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DegreeCompetences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Departament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Departaments");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DepartamentId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeProfileId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstSurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("SecondLastSurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartamentId");

                    b.HasIndex("EmployeeProfileId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.EmployeeCompetence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetenceId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmployeeCompetences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.EmployeeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SolutionDomainId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SolutionDomainId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmployeeProfiles");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CultureId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OrganizacionId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ScreenAutoLockMinutes")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizacionId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Knowledge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Knowledges");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Motivation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Motiviations");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Mision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Vision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Preference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreferenceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PreferenceTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.PreferenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PreferenceTypes");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechnicalSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TechnicalSheetId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.ProjectTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ProjectTeams");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Responsability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetenceProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceProfileId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Responsability");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SkillTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.SkillType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SkillTypes");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.SolutionDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SolutionDomains");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.SolutionDomainCompetence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetenceId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int?>("SolutionDomainId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SolutionDomainId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SolutionDomainCompetence");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.TechnicalSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("InitialTechnicalProposal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SolutionDomainId")
                        .HasColumnType("int");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SolutionDomainId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TechnicalSheets");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.TechnicalSheetCompose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeProfileId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("TechnicalSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmployeeProfileId");

                    b.HasIndex("TechnicalSheetId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TechnicalSheetCompose");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Behavior", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("BehaviorUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("BehaviorUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.BehaviorDictionary", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Behavior", "Behavior")
                        .WithMany("BehaviorDictionaries")
                        .HasForeignKey("BehaviorId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("BehaviorDictionaryUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.DegreeCompetence", "DegreeCompetence")
                        .WithMany("BehaviourDictionaries")
                        .HasForeignKey("DegreeCompetenceId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("BehaviorDictionaryUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Behavior");

                    b.Navigation("DegreeCompetence");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.C_S_M_K_P", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Competence", "Competence")
                        .WithMany("Competence_Skill_Motivation_Knowledge_Preferences")
                        .HasForeignKey("CompetenceId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("CSMKUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Knowledge", "Knowledge")
                        .WithMany("Competence_Skill_Motivation_Knowledge_Preferences")
                        .HasForeignKey("KnowledgeId");

                    b.HasOne("CompetencePlatform.Core.Entities.Motivation", "Motivation")
                        .WithMany("Competence_Skill_Motivation_Knowledge_Preferences")
                        .HasForeignKey("MotivationId");

                    b.HasOne("CompetencePlatform.Core.Entities.Preference", "Preference")
                        .WithMany("Competence_Skill_Motivation_Knowledge_Preferences")
                        .HasForeignKey("PreferenceId");

                    b.HasOne("CompetencePlatform.Core.Entities.Skill", "Skill")
                        .WithMany("Competence_Skill_Motivation_Knowledge_Preferences")
                        .HasForeignKey("SkillId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("CSMKUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Competence");

                    b.Navigation("Knowledge");

                    b.Navigation("Motivation");

                    b.Navigation("Preference");

                    b.Navigation("Skill");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Competence", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.CompetenceType", "CompetenceType")
                        .WithMany("Competences")
                        .HasForeignKey("CompetenceTypeId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("CompetenceUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("CompetenceUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CompetenceType");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.CompetenceDictionary", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.BehaviorDictionary", "BehaviorDictionary")
                        .WithMany("CompetenceDictionaries")
                        .HasForeignKey("BehaviorDictionaryId");

                    b.HasOne("CompetencePlatform.Core.Entities.Competence", "Competence")
                        .WithMany("CompetenceDictionaries")
                        .HasForeignKey("CompetenceId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("CompetenceDictionaryUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("CompetenceDictionaryUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("BehaviorDictionary");

                    b.Navigation("Competence");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.CompetenceProfile", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.CompetenceDictionary", "CompetenceDictionary")
                        .WithMany("CompetenceProfiles")
                        .HasForeignKey("CompetenceDictionaryId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("CompetenceProfileUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.EmployeeProfile", "EmployeeProfile")
                        .WithMany("CompetenceProfiles")
                        .HasForeignKey("EmployeeProfileId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("CompetenceProfileUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CompetenceDictionary");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.CompetenceType", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("CompetenceTypeUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("CompetenceTypeUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.DegreeCompetence", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("DegreeCompetenceUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("DegreeCompetenceUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Departament", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("DepartamentUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Organization", "Organization")
                        .WithMany("Departaments")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("DepartamentUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Organization");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Employee", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("EmployeeUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Departament", "Departament")
                        .WithMany("Employees")
                        .HasForeignKey("DepartamentId");

                    b.HasOne("CompetencePlatform.Core.Entities.EmployeeProfile", "EmployeeProfile")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeProfileId");

                    b.HasOne("CompetencePlatform.Core.Entities.Team", "Team")
                        .WithMany("Employees")
                        .HasForeignKey("TeamId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("EmployeeUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Departament");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("Team");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.EmployeeCompetence", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Competence", "Competence")
                        .WithMany("EmployeeCompetences")
                        .HasForeignKey("CompetenceId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("EmployeeCompetenceUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Employee", "Employee")
                        .WithMany("EmployeeCompetences")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("EmployeeCompetenceUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Competence");

                    b.Navigation("Employee");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.EmployeeProfile", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("EmployeeProfileUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.SolutionDomain", "SolutionDomain")
                        .WithMany("EmployeeProfiles")
                        .HasForeignKey("SolutionDomainId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("EmployeeProfileUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("SolutionDomain");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.Role", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.User", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.UserLogin", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", null)
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Knowledge", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("KnowledgeUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("KnowledgeUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Motivation", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("MotivationUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("MotivationUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Preference", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("PreferenceUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.PreferenceType", "PreferenceType")
                        .WithMany("Preferences")
                        .HasForeignKey("PreferenceTypeId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("PreferenceUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("PreferenceType");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.PreferenceType", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("PreferenceTypeUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("PreferenceTypeUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Project", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("ProjectUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.TechnicalSheet", "TechnicalSheet")
                        .WithMany("Projects")
                        .HasForeignKey("TechnicalSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("ProjectUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("TechnicalSheet");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.ProjectTeam", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("ProjectTeamUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("CompetencePlatform.Core.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("ProjectTeamUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Project");

                    b.Navigation("Team");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Responsability", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.CompetenceProfile", "CompetenceProfile")
                        .WithMany("Responsabilities")
                        .HasForeignKey("CompetenceProfileId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("ResponsabilityUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("ResponsabilityUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CompetenceProfile");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Skill", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("SkillUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.SkillType", "SkillType")
                        .WithMany("Skills")
                        .HasForeignKey("SkillTypeId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("SkillUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("SkillType");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.SkillType", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("SkillTypeUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("SkillTypeUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.SolutionDomain", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("SolutionDomainUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Organization", "Organization")
                        .WithMany("SolutionDomains")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("SolutionDomainUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Organization");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.SolutionDomainCompetence", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Competence", "Competence")
                        .WithMany("SolutionDomainCompetences")
                        .HasForeignKey("CompetenceId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("SolutionDomainCompetenceUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.SolutionDomain", "SolutionDomain")
                        .WithMany("SolutionDomainCompetences")
                        .HasForeignKey("SolutionDomainId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("SolutionDomainCompetenceUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Competence");

                    b.Navigation("SolutionDomain");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Team", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("TeamUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("TeamUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.TechnicalSheet", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("TechnicalSheetUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.SolutionDomain", "SolutionDomain")
                        .WithMany("TechnicalSheets")
                        .HasForeignKey("SolutionDomainId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("TechnicalSheetUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("SolutionDomain");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.TechnicalSheetCompose", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserCreatedBy")
                        .WithMany("TechnicalSheetComposeUserCreatedBy")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("CompetencePlatform.Core.Entities.EmployeeProfile", "EmployeeProfile")
                        .WithMany("TechnicalSheetComposes")
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompetencePlatform.Core.Entities.TechnicalSheet", "TechnicalSheet")
                        .WithMany("TechnicalSheetComposes")
                        .HasForeignKey("TechnicalSheetId");

                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", "UserUpdatedBy")
                        .WithMany("TechnicalSheetComposeUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("TechnicalSheet");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserUpdatedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CompetencePlatform.Core.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Behavior", b =>
                {
                    b.Navigation("BehaviorDictionaries");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.BehaviorDictionary", b =>
                {
                    b.Navigation("CompetenceDictionaries");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Competence", b =>
                {
                    b.Navigation("CompetenceDictionaries");

                    b.Navigation("Competence_Skill_Motivation_Knowledge_Preferences");

                    b.Navigation("EmployeeCompetences");

                    b.Navigation("SolutionDomainCompetences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.CompetenceDictionary", b =>
                {
                    b.Navigation("CompetenceProfiles");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.CompetenceProfile", b =>
                {
                    b.Navigation("Responsabilities");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.CompetenceType", b =>
                {
                    b.Navigation("Competences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.DegreeCompetence", b =>
                {
                    b.Navigation("BehaviourDictionaries");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Departament", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeCompetences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.EmployeeProfile", b =>
                {
                    b.Navigation("CompetenceProfiles");

                    b.Navigation("Employees");

                    b.Navigation("TechnicalSheetComposes");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Identity.User", b =>
                {
                    b.Navigation("BehaviorDictionaryUserCreatedBy");

                    b.Navigation("BehaviorDictionaryUserUpdatedBy");

                    b.Navigation("BehaviorUserCreatedBy");

                    b.Navigation("BehaviorUserUpdatedBy");

                    b.Navigation("CSMKUserCreatedBy");

                    b.Navigation("CSMKUserUpdatedBy");

                    b.Navigation("CompetenceDictionaryUserCreatedBy");

                    b.Navigation("CompetenceDictionaryUserUpdatedBy");

                    b.Navigation("CompetenceProfileUserCreatedBy");

                    b.Navigation("CompetenceProfileUserUpdatedBy");

                    b.Navigation("CompetenceTypeUserCreatedBy");

                    b.Navigation("CompetenceTypeUserUpdatedBy");

                    b.Navigation("CompetenceUserCreatedBy");

                    b.Navigation("CompetenceUserUpdatedBy");

                    b.Navigation("DegreeCompetenceUserCreatedBy");

                    b.Navigation("DegreeCompetenceUserUpdatedBy");

                    b.Navigation("DepartamentUserCreatedBy");

                    b.Navigation("DepartamentUserUpdatedBy");

                    b.Navigation("EmployeeCompetenceUserCreatedBy");

                    b.Navigation("EmployeeCompetenceUserUpdatedBy");

                    b.Navigation("EmployeeProfileUserCreatedBy");

                    b.Navigation("EmployeeProfileUserUpdatedBy");

                    b.Navigation("EmployeeUserCreatedBy");

                    b.Navigation("EmployeeUserUpdatedBy");

                    b.Navigation("KnowledgeUserCreatedBy");

                    b.Navigation("KnowledgeUserUpdatedBy");

                    b.Navigation("MotivationUserCreatedBy");

                    b.Navigation("MotivationUserUpdatedBy");

                    b.Navigation("PreferenceTypeUserCreatedBy");

                    b.Navigation("PreferenceTypeUserUpdatedBy");

                    b.Navigation("PreferenceUserCreatedBy");

                    b.Navigation("PreferenceUserUpdatedBy");

                    b.Navigation("ProjectTeamUserCreatedBy");

                    b.Navigation("ProjectTeamUserUpdatedBy");

                    b.Navigation("ProjectUserCreatedBy");

                    b.Navigation("ProjectUserUpdatedBy");

                    b.Navigation("ResponsabilityUserCreatedBy");

                    b.Navigation("ResponsabilityUserUpdatedBy");

                    b.Navigation("Roles");

                    b.Navigation("SkillTypeUserCreatedBy");

                    b.Navigation("SkillTypeUserUpdatedBy");

                    b.Navigation("SkillUserCreatedBy");

                    b.Navigation("SkillUserUpdatedBy");

                    b.Navigation("SolutionDomainCompetenceUserCreatedBy");

                    b.Navigation("SolutionDomainCompetenceUserUpdatedBy");

                    b.Navigation("SolutionDomainUserCreatedBy");

                    b.Navigation("SolutionDomainUserUpdatedBy");

                    b.Navigation("TeamUserCreatedBy");

                    b.Navigation("TeamUserUpdatedBy");

                    b.Navigation("TechnicalSheetComposeUserCreatedBy");

                    b.Navigation("TechnicalSheetComposeUserUpdatedBy");

                    b.Navigation("TechnicalSheetUserCreatedBy");

                    b.Navigation("TechnicalSheetUserUpdatedBy");

                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Knowledge", b =>
                {
                    b.Navigation("Competence_Skill_Motivation_Knowledge_Preferences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Motivation", b =>
                {
                    b.Navigation("Competence_Skill_Motivation_Knowledge_Preferences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Organization", b =>
                {
                    b.Navigation("Departaments");

                    b.Navigation("SolutionDomains");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Preference", b =>
                {
                    b.Navigation("Competence_Skill_Motivation_Knowledge_Preferences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.PreferenceType", b =>
                {
                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Skill", b =>
                {
                    b.Navigation("Competence_Skill_Motivation_Knowledge_Preferences");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.SkillType", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.SolutionDomain", b =>
                {
                    b.Navigation("EmployeeProfiles");

                    b.Navigation("SolutionDomainCompetences");

                    b.Navigation("TechnicalSheets");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.Team", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CompetencePlatform.Core.Entities.TechnicalSheet", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("TechnicalSheetComposes");
                });
#pragma warning restore 612, 618
        }
    }
}
